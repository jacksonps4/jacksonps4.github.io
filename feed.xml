<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-09-09T23:00:11+01:00</updated><id>/feed.xml</id><title type="html">cwpad.com</title><subtitle>The homepage of Chris Wraith.</subtitle><entry><title type="html">Are you a sorter or a searcher?</title><link href="/uncategorized/2013/10/10/1339.html" rel="alternate" type="text/html" title="Are you a sorter or a searcher?" /><published>2013-10-10T12:44:36+01:00</published><updated>2013-10-10T12:44:36+01:00</updated><id>/uncategorized/2013/10/10/1339</id><content type="html" xml:base="/uncategorized/2013/10/10/1339.html">&lt;p&gt;When the postman arrives with your mail, some people open it all and file it away neatly in its proper place so that it can be found straight away when required? If this is you, you're probably a sorter. Others prefer not to spend the time organising and would rather leave their mail in a pile or a drawer, so it can still be found easily but some rummaging may be necessary for retrieval. If this is more like you then you're probably a searcher.&lt;/p&gt;
&lt;p&gt;People generally fall more strongly into either the searcher or sorter category. Knowing which one you are can help you become more efficient as sometimes, your normal preference is not necessarily effective. Choosing the best method for a particular task depends on the relative cost of each method. Creating a sorting system can complicated and it may not provide any benefit, especially if searching is easy. On the other hand, if something needs to be found in a hurry from a large, unordered set, searching may be very inefficient.&lt;/p&gt;
&lt;p&gt;It all depends on the situation. Take email for example. If you get 20-30 emails per day, searching will probably be fine as if you need to find a particular email, you'll probably know who it was from or remember something in the subject line. In that case, searching is easy and it also means that you don't have to spend any time sorting it. If you get 5000 emails per day, some sorting will make things easier later as it will allow you to separate messages that you'll definitely need again to find from those which you probably won't. Some of the sorting will probably need to be automated though as otherwise, you'd spend a significant amount of time organising. If you don't sort and you need to find a message where you don't know the sender or subject line, it might take a long time to retrieve.&lt;/p&gt;</content><author><name>{&quot;display_name&quot;=&gt;&quot;jacksonps4&quot;, &quot;login&quot;=&gt;&quot;jacksonps4&quot;, &quot;email&quot;=&gt;&quot;chris@indigenously.co.uk&quot;, &quot;url&quot;=&gt;&quot;&quot;}</name><email>chris@indigenously.co.uk</email></author><summary type="html">When the postman arrives with your mail, some people open it all and file it away neatly in its proper place so that it can be found straight away when required? If this is you, you're probably a sorter. Others prefer not to spend the time organising and would rather leave their mail in a pile or a drawer, so it can still be found easily but some rummaging may be necessary for retrieval. If this is more like you then you're probably a searcher. People generally fall more strongly into either the searcher or sorter category. Knowing which one you are can help you become more efficient as sometimes, your normal preference is not necessarily effective. Choosing the best method for a particular task depends on the relative cost of each method. Creating a sorting system can complicated and it may not provide any benefit, especially if searching is easy. On the other hand, if something needs to be found in a hurry from a large, unordered set, searching may be very inefficient. It all depends on the situation. Take email for example. If you get 20-30 emails per day, searching will probably be fine as if you need to find a particular email, you'll probably know who it was from or remember something in the subject line. In that case, searching is easy and it also means that you don't have to spend any time sorting it. If you get 5000 emails per day, some sorting will make things easier later as it will allow you to separate messages that you'll definitely need again to find from those which you probably won't. Some of the sorting will probably need to be automated though as otherwise, you'd spend a significant amount of time organising. If you don't sort and you need to find a message where you don't know the sender or subject line, it might take a long time to retrieve.</summary></entry><entry><title type="html">Being a more efficient software developer</title><link href="/uncategorized/2013/10/08/five-tips-for-being-a-good-software-developer.html" rel="alternate" type="text/html" title="Being a more efficient software developer" /><published>2013-10-08T12:05:40+01:00</published><updated>2013-10-08T12:05:40+01:00</updated><id>/uncategorized/2013/10/08/five-tips-for-being-a-good-software-developer</id><content type="html" xml:base="/uncategorized/2013/10/08/five-tips-for-being-a-good-software-developer.html">&lt;p&gt;I was asked recently about what I would tell myself shortly after graduating if I had the opportunity to give my younger self some advice. Based on years of commercial experience, there are a few relatively simple things that have made a big difference.&lt;/p&gt;
&lt;h3&gt;Automation means that you will make fewer mistakes&lt;/h3&gt;
&lt;p&gt;If you can automate a repetitive task, do so as it will mean fewer problems due to human error. The trick is being able to automate the task sufficiently quickly such that you don't spend more time setting up an automation that it would have taken you to complete the repetitive tasks one by one. &lt;/p&gt;
&lt;h3&gt;Know at least one programming language at an advanced level&lt;/h3&gt;
&lt;p&gt;This sounds fairly obvious but many developers know lots of languages but only to an intermediate level. It is really important to have at least once tool in your development toolbox with which you can perform any task that you need to do. The actual choice of language isn't too important as long as you're comfortable with it. I would suggest at least one of the following would be useful for most job opportunities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;C#&lt;/li&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Specialising in one particular language has numerous advantages. Firstly, you learn more of its features and so it takes you less time to program them. In addition, most higher level languages at the present time are surrounded by a plethora of frameworks and helpers that take the basic language implementation and build on top of it - so it gives you the opportunity to understand these frameworks too. Knowing when it makes sense to use a framework and when not to is also an important skill.&lt;/p&gt;
&lt;h3&gt;Learn how to use regular expressions thoroughly&lt;/h3&gt;
&lt;p&gt;Regular expressions have become one of my favourite things over the years. As a developer, you are regularly faced with occasions when you have to search or transform very large sets of data in a specific way. This could be something as simple as replacing every instance of 'specialize' with 'specialise' in a large document or something a little more complicated such as replacing the first three characters from the third field in a comma-separated file with 'XYZ' where the fourth column is 'Y' and the third field starts with 'ABC'. Regular expressions build the foundations of many of the most useful UNIX tools that I'll describe in the next section - so knowing them well is very helpful.&lt;/p&gt;
&lt;h3&gt;Copy and paste rather than retype where possible&lt;/h3&gt;
&lt;p&gt;This will result in fewer mistakes. Your eyes are very good at interpolating images so that you see what you expect you will see - even though you didn't actually look! &lt;/p&gt;
&lt;h3&gt;Learn Linux / UNIX basics - streams, command [cat, grep, sed, awk, find, xargs]&lt;/h3&gt;
&lt;p&gt;The more you use UNIX or Linux, the more you realise that the vast majority of problems that you encounter on a day-to-day basis have already been solved. The solutions are available for you to use - you just have to know where they are.&lt;/p&gt;
&lt;h3&gt;Understand hash functions (many applications in searching, loan balancing, map-reduce)&lt;/h3&gt;
&lt;p&gt;Hash functions will definitely have been covered in your university course if you studied Computing Science or Software Engineering. You are likely to have encountered them when talking about searching as one of their uses is allowing you to search a very large data set in constant time.&lt;/p&gt;
&lt;h3&gt;Understand the problem you're dealing with&lt;/h3&gt;
&lt;p&gt;In order to solve a complex problem effectively, it is important to understand all aspects of the problem. This enables you to structure the data to achieve whatever you're trying to do. Don't be afraid to build a prototype quickly without necessarily adhering strictly to your normal development and testing methodologies and standards. The idea of a quick prototype is to help you to understand the problem. Just make sure that you avoid the pitfall of evolving the early prototype too far without adding in proper testing.&lt;/p&gt;</content><author><name>{&quot;display_name&quot;=&gt;&quot;jacksonps4&quot;, &quot;login&quot;=&gt;&quot;jacksonps4&quot;, &quot;email&quot;=&gt;&quot;chris@indigenously.co.uk&quot;, &quot;url&quot;=&gt;&quot;&quot;}</name><email>chris@indigenously.co.uk</email></author><summary type="html">I was asked recently about what I would tell myself shortly after graduating if I had the opportunity to give my younger self some advice. Based on years of commercial experience, there are a few relatively simple things that have made a big difference. Automation means that you will make fewer mistakes If you can automate a repetitive task, do so as it will mean fewer problems due to human error. The trick is being able to automate the task sufficiently quickly such that you don't spend more time setting up an automation that it would have taken you to complete the repetitive tasks one by one. Know at least one programming language at an advanced level This sounds fairly obvious but many developers know lots of languages but only to an intermediate level. It is really important to have at least once tool in your development toolbox with which you can perform any task that you need to do. The actual choice of language isn't too important as long as you're comfortable with it. I would suggest at least one of the following would be useful for most job opportunities: Java C# C++ Specialising in one particular language has numerous advantages. Firstly, you learn more of its features and so it takes you less time to program them. In addition, most higher level languages at the present time are surrounded by a plethora of frameworks and helpers that take the basic language implementation and build on top of it - so it gives you the opportunity to understand these frameworks too. Knowing when it makes sense to use a framework and when not to is also an important skill. Learn how to use regular expressions thoroughly Regular expressions have become one of my favourite things over the years. As a developer, you are regularly faced with occasions when you have to search or transform very large sets of data in a specific way. This could be something as simple as replacing every instance of 'specialize' with 'specialise' in a large document or something a little more complicated such as replacing the first three characters from the third field in a comma-separated file with 'XYZ' where the fourth column is 'Y' and the third field starts with 'ABC'. Regular expressions build the foundations of many of the most useful UNIX tools that I'll describe in the next section - so knowing them well is very helpful. Copy and paste rather than retype where possible This will result in fewer mistakes. Your eyes are very good at interpolating images so that you see what you expect you will see - even though you didn't actually look! Learn Linux / UNIX basics - streams, command [cat, grep, sed, awk, find, xargs] The more you use UNIX or Linux, the more you realise that the vast majority of problems that you encounter on a day-to-day basis have already been solved. The solutions are available for you to use - you just have to know where they are. Understand hash functions (many applications in searching, loan balancing, map-reduce) Hash functions will definitely have been covered in your university course if you studied Computing Science or Software Engineering. You are likely to have encountered them when talking about searching as one of their uses is allowing you to search a very large data set in constant time. Understand the problem you're dealing with In order to solve a complex problem effectively, it is important to understand all aspects of the problem. This enables you to structure the data to achieve whatever you're trying to do. Don't be afraid to build a prototype quickly without necessarily adhering strictly to your normal development and testing methodologies and standards. The idea of a quick prototype is to help you to understand the problem. Just make sure that you avoid the pitfall of evolving the early prototype too far without adding in proper testing.</summary></entry><entry><title type="html">How much caffeine?</title><link href="/personal/2013/09/20/caffeine-free-quite.html" rel="alternate" type="text/html" title="How much caffeine?" /><published>2013-09-20T12:50:05+01:00</published><updated>2013-09-20T12:50:05+01:00</updated><id>/personal/2013/09/20/caffeine-free-quite</id><content type="html" xml:base="/personal/2013/09/20/caffeine-free-quite.html">&lt;p&gt;
A few weeks ago I decided to try to reduce my caffeine intake to see if would have any effect of my levels of tiredness, sleep quality or anything else. I found the results quite surprising.&lt;/p&gt;
&lt;p&gt;
I've never really thought of myself as a caffeine fiend. Most weekdays, I'd probably have two &quot;tall&quot; Americano type coffees and sometimes a cup of tea or two. However, this represents around 300mg of caffeine (the recommended daily limit is around 400mg or 200mg for pregnant women).&lt;/p&gt;
&lt;p&gt;
So, after having about four coffees and four cups of tea on a Saturday, the next day, I had no tea, coffee or caffeine of any sort. Having had a good night's sleep, I didn't notice any significant effects. However, by the Monday afternoon, I had a headache that persisted into early on the Thursday. This was accompanied by aches down the backs of my legs which continued until the Saturday. As withdrawal symptoms go, I would class these as a mild discomfort but they were definitely noticeable.&lt;/p&gt;
&lt;p&gt;Thankfully, by the following Sunday, all was well. I felt my normal self again. I was definitely sleeping for longer and feeling tired earlier. I wish I could say that I was waking up feeling more energised but I haven't noticed any changes there. I do however, feel a little more alert and able to think (particularly in the early afternoon) than I did before.&lt;/p&gt;
&lt;p&gt;&lt;p&gt;
I haven't cut caffeine out altogether - I've still been eating chocolate and having the occasional cup of tea and I am certainly not planning never to drink tea or coffee again. It was just interesting to see what happens to me when I don't have any caffeine.&lt;/p&gt;</content><author><name>{&quot;display_name&quot;=&gt;&quot;jacksonps4&quot;, &quot;login&quot;=&gt;&quot;jacksonps4&quot;, &quot;email&quot;=&gt;&quot;chris@indigenously.co.uk&quot;, &quot;url&quot;=&gt;&quot;&quot;}</name><email>chris@indigenously.co.uk</email></author><category term="caffeine coffee tea" /><summary type="html">A few weeks ago I decided to try to reduce my caffeine intake to see if would have any effect of my levels of tiredness, sleep quality or anything else. I found the results quite surprising. I've never really thought of myself as a caffeine fiend. Most weekdays, I'd probably have two &quot;tall&quot; Americano type coffees and sometimes a cup of tea or two. However, this represents around 300mg of caffeine (the recommended daily limit is around 400mg or 200mg for pregnant women). So, after having about four coffees and four cups of tea on a Saturday, the next day, I had no tea, coffee or caffeine of any sort. Having had a good night's sleep, I didn't notice any significant effects. However, by the Monday afternoon, I had a headache that persisted into early on the Thursday. This was accompanied by aches down the backs of my legs which continued until the Saturday. As withdrawal symptoms go, I would class these as a mild discomfort but they were definitely noticeable. Thankfully, by the following Sunday, all was well. I felt my normal self again. I was definitely sleeping for longer and feeling tired earlier. I wish I could say that I was waking up feeling more energised but I haven't noticed any changes there. I do however, feel a little more alert and able to think (particularly in the early afternoon) than I did before. I haven't cut caffeine out altogether - I've still been eating chocolate and having the occasional cup of tea and I am certainly not planning never to drink tea or coffee again. It was just interesting to see what happens to me when I don't have any caffeine.</summary></entry><entry><title type="html">Starting a C project with autoconf / automake</title><link href="/technology/2013/03/20/starting-a-c-project-with-autoconf-automake.html" rel="alternate" type="text/html" title="Starting a C project with autoconf / automake" /><published>2013-03-20T11:05:54+00:00</published><updated>2013-03-20T11:05:54+00:00</updated><id>/technology/2013/03/20/starting-a-c-project-with-autoconf-automake</id><content type="html" xml:base="/technology/2013/03/20/starting-a-c-project-with-autoconf-automake.html">&lt;p&gt;Sometimes when testing out an pattern or algorithm that requires platform or OS specific features, hardware interfacing or raw speed, C is the only language in which to implement it.&lt;/p&gt;
&lt;p&gt;This is a quick note-to-self for future reference. I currently have these steps in a text file on my laptop as a reminder of what needs to be done when starting a simple project in C, allowing Automake to generate your build scripts for you.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add source files&lt;/li&gt;
&lt;li&gt;Add Makefile.am&lt;/li&gt;
&lt;li&gt;&lt;code&gt;autoscan&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add AM_INIT_AUTOMAKE to configure.scan&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mv configure.scan configure.ac&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;touch README NEWS AUTHORS ChangeLog&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;autoreconf --install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./configure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>{&quot;display_name&quot;=&gt;&quot;jacksonps4&quot;, &quot;login&quot;=&gt;&quot;jacksonps4&quot;, &quot;email&quot;=&gt;&quot;chris@indigenously.co.uk&quot;, &quot;url&quot;=&gt;&quot;&quot;}</name><email>chris@indigenously.co.uk</email></author><summary type="html">Sometimes when testing out an pattern or algorithm that requires platform or OS specific features, hardware interfacing or raw speed, C is the only language in which to implement it. This is a quick note-to-self for future reference. I currently have these steps in a text file on my laptop as a reminder of what needs to be done when starting a simple project in C, allowing Automake to generate your build scripts for you. Add source files Add Makefile.am autoscan Add AM_INIT_AUTOMAKE to configure.scan mv configure.scan configure.ac touch README NEWS AUTHORS ChangeLog autoreconf --install ./configure make</summary></entry><entry><title type="html">iPad, iRig and Garageband: St James Infirmary blues</title><link href="/music/2012/10/22/ipad-irig-and-garageband-st-james-infirmary-blues.html" rel="alternate" type="text/html" title="iPad, iRig and Garageband: St James Infirmary blues" /><published>2012-10-22T22:49:08+01:00</published><updated>2012-10-22T22:49:08+01:00</updated><id>/music/2012/10/22/ipad-irig-and-garageband-st-james-infirmary-blues</id><content type="html" xml:base="/music/2012/10/22/ipad-irig-and-garageband-st-james-infirmary-blues.html">&lt;p&gt;It has been quite a while since I did &lt;a href=&quot;/wordpress/?p=902&quot;&gt;my last iPad+iRig+Garageband post&lt;/a&gt; so I thought I'd kick it off again by having a go at St James Infirmary blues on the guitar. The aim was to add some drums this time. One reason that I chose it is that the riff has a very James Bond feel to it.&lt;/p&gt;
&lt;p&gt;This is a track that has been covered many times but fairly recently by &lt;a href=&quot;http://www.hughlaurieblues.com/about.htm&quot;&gt;Hugh Laurie&lt;/a&gt; of all people on his blues album &lt;em&gt;Let them talk&lt;/em&gt;. His cover is actually the track from which the opening riff in this version comes except that he did it on the piano and I used the electric guitar. Hugh is actually a pretty talented musician as well as an excellent actor.&lt;/p&gt;
&lt;div class=&quot;ab-player&quot; data-boourl=&quot;http://audioboo.fm/boos/1020518-st-james-infirmary-blues/embed&quot;&gt;&lt;a href=&quot;http://audioboo.fm/boos/1020518-st-james-infirmary-blues&quot;&gt;listen to &amp;#x2018;St James Infirmary blues&amp;#x2019; on Audioboo&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;text/javascript&quot;&gt;(function() { var po = document.createElement(&quot;script&quot;); po.type = &quot;text/javascript&quot;; po.async = true; po.src = &quot;http://d15mj6e6qmt1na.cloudfront.net/assets/embed.js&quot;; var s = document.getElementsByTagName(&quot;script&quot;)[0]; s.parentNode.insertBefore(po, s); })();&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;This is a fairly rough cut, which I spend about an hour on. The mix is composed of a smart drums track and two guitar tracks: one &lt;em&gt;clean combo&lt;/em&gt; with the defaults and the lead guitar uses &lt;em&gt;crunchy blues&lt;/em&gt; with the output turned up slightly. No other magic - just a few pretty sore fingers now.&lt;/p&gt;</content><author><name>{&quot;display_name&quot;=&gt;&quot;jacksonps4&quot;, &quot;login&quot;=&gt;&quot;jacksonps4&quot;, &quot;email&quot;=&gt;&quot;chris@indigenously.co.uk&quot;, &quot;url&quot;=&gt;&quot;&quot;}</name><email>chris@indigenously.co.uk</email></author><summary type="html">A version of St James Infirmary blues inspired by the recent Hugh Laurie cover on Let Them Talk.</summary></entry><entry><title type="html">Sight-reading music is difficult when you already play well by ear</title><link href="/music/2012/07/24/learning-to-read-music-is-difficult-when-you-play-well-by-ear.html" rel="alternate" type="text/html" title="Sight-reading music is difficult when you already play well by ear" /><published>2012-07-24T12:30:07+01:00</published><updated>2012-07-24T12:30:07+01:00</updated><id>/music/2012/07/24/learning-to-read-music-is-difficult-when-you-play-well-by-ear</id><content type="html" xml:base="/music/2012/07/24/learning-to-read-music-is-difficult-when-you-play-well-by-ear.html">&lt;p&gt;I've always wanted to be the kind of pianist who can pick up a sheet of music, have a quick glance at it, then place it on the music stand and sight-read through it at a sensible tempo without too many mistakes.&lt;/p&gt;
&lt;p&gt;Despite having started learning the piano about twenty years ago, this isn't something that I'm yet able to do.&lt;/p&gt;
&lt;p&gt;I do understand what all of the symbols on the staff mean and what sounds they should produce. I can count and I know my scales. Given an (almost) unlimited amount of time, I can eventually play just about anything on the piano to a considerably less than perfect standard but when it comes to doing it in real-time, it is just something I presently find impossible. What happens is what computing scientists would describe as a &quot;buffer under-run&quot; - my eyes can't decode what is in front of me fast enough so my hands catch-up and I have to pause. There is evidently another skill to sight-reading that I don't yet have.&lt;/p&gt;
&lt;p&gt;There are some things that makes sight-reading a little easier for me. The first is knowing the tune already. It sounds obvious but if I can hear the tune in my head, it is far easier for me to play. I can play quite well by ear and sometimes this is a frustration as it reduces the incentive to be able to read well. Also, single lines of notes, like the bass-line in choral music, are also a little easier to read.&lt;/p&gt;
&lt;p&gt;I've heard one theory that the ability to read-music depends on the dominant side of your brain. People who are right-brained (left-handed) tend to be better at playing by ear and less good at sight-reading. The more abundant left-brained (right-handed) person is usually the opposite. This is not so for me, however, as I'm right-handed.&lt;/p&gt;
&lt;p&gt;I'd love to hear from sight-readers who have struggled in the past but who now &quot;get it&quot;. I know plenty of people who play by ear as a rule and have never found the need to learn to read music - I've just always felt that this removes a very important avenue for learning.&lt;/p&gt;</content><author><name>{&quot;display_name&quot;=&gt;&quot;jacksonps4&quot;, &quot;login&quot;=&gt;&quot;jacksonps4&quot;, &quot;email&quot;=&gt;&quot;chris@indigenously.co.uk&quot;, &quot;url&quot;=&gt;&quot;&quot;}</name><email>chris@indigenously.co.uk</email></author><summary type="html">I've always wanted to be the kind of pianist who can pick up a sheet of music, have a quick glance at it, then place it on the music stand and sight-read through it at a sensible tempo without too many mistakes. Despite having started learning the piano about twenty years ago, this isn't something that I'm yet able to do. I do understand what all of the symbols on the staff mean and what sounds they should produce. I can count and I know my scales. Given an (almost) unlimited amount of time, I can eventually play just about anything on the piano to a considerably less than perfect standard but when it comes to doing it in real-time, it is just something I presently find impossible. What happens is what computing scientists would describe as a &quot;buffer under-run&quot; - my eyes can't decode what is in front of me fast enough so my hands catch-up and I have to pause. There is evidently another skill to sight-reading that I don't yet have. There are some things that makes sight-reading a little easier for me. The first is knowing the tune already. It sounds obvious but if I can hear the tune in my head, it is far easier for me to play. I can play quite well by ear and sometimes this is a frustration as it reduces the incentive to be able to read well. Also, single lines of notes, like the bass-line in choral music, are also a little easier to read. I've heard one theory that the ability to read-music depends on the dominant side of your brain. People who are right-brained (left-handed) tend to be better at playing by ear and less good at sight-reading. The more abundant left-brained (right-handed) person is usually the opposite. This is not so for me, however, as I'm right-handed. I'd love to hear from sight-readers who have struggled in the past but who now &quot;get it&quot;. I know plenty of people who play by ear as a rule and have never found the need to learn to read music - I've just always felt that this removes a very important avenue for learning.</summary></entry><entry><title type="html">ISPs and filtering: the sorting office analogy</title><link href="/technology/2012/05/13/isps-and-filtering-the-sorting-office-analogy.html" rel="alternate" type="text/html" title="ISPs and filtering: the sorting office analogy" /><published>2012-05-13T10:25:07+01:00</published><updated>2012-05-13T10:25:07+01:00</updated><id>/technology/2012/05/13/isps-and-filtering-the-sorting-office-analogy</id><content type="html" xml:base="/technology/2012/05/13/isps-and-filtering-the-sorting-office-analogy.html">&lt;p&gt;With all of the recent parliament and newspaper interest in ISPs filtering content - specifically with reference to blocking particular sites, it is worth spelling out why compelling them to filter certain web sites is useless. &lt;/p&gt;
&lt;p&gt;Imagine that Royal Mail was prohibited from delivering mail to domestic addresses from certain senders. &lt;/p&gt;
&lt;p&gt;A very simple analogy is to think of ISPs like the sorting department in the post office. Let us consider only postcards and letters.&lt;/p&gt;
&lt;p&gt;Postcards are &quot;open&quot; and the sorting office can see both the sender and recipient as well as their content. As letters are in envelopes, the sorting office can see the sender's address (on the back) and the recipient's address on the front. However, they cannot read the contents of the envelope.&lt;/p&gt;
&lt;p&gt;Web traffic is similar to this. Ordinary web traffic (e.g. BBC News) appears to the ISP like a postcard. They can see the sender and receiver as well as the article being read. &lt;/p&gt;
&lt;p&gt;Encrypted web traffic is a little more like a letter. The ISP can see the sender and receiver but cannot read the data that was sent. This means that content can only be blocked on the basis of sender or receiver. Hence, an ISP wishing to block a porn site hosted on a commercial web server that hosts both a news site and a porn site would have to block both - meaning the news site would be inaccessible.&lt;/p&gt;
&lt;p&gt;This is not very fair on the news site which becomes a victim of censorship in this case.&lt;/p&gt;
&lt;p&gt;It is worth noting that this is a considerable simplification and does not refer to all of the technical issues surrounding filtering but is a useful model for demonstrating a principle.&lt;/p&gt;</content><author><name>{&quot;display_name&quot;=&gt;&quot;jacksonps4&quot;, &quot;login&quot;=&gt;&quot;jacksonps4&quot;, &quot;email&quot;=&gt;&quot;chris@indigenously.co.uk&quot;, &quot;url&quot;=&gt;&quot;&quot;}</name><email>chris@indigenously.co.uk</email></author><summary type="html">With all of the recent parliament and newspaper interest in ISPs filtering content - specifically with reference to blocking particular sites, it is worth spelling out why compelling them to filter certain web sites is useless. Imagine that Royal Mail was prohibited from delivering mail to domestic addresses from certain senders. A very simple analogy is to think of ISPs like the sorting department in the post office. Let us consider only postcards and letters. Postcards are &quot;open&quot; and the sorting office can see both the sender and recipient as well as their content. As letters are in envelopes, the sorting office can see the sender's address (on the back) and the recipient's address on the front. However, they cannot read the contents of the envelope. Web traffic is similar to this. Ordinary web traffic (e.g. BBC News) appears to the ISP like a postcard. They can see the sender and receiver as well as the article being read. Encrypted web traffic is a little more like a letter. The ISP can see the sender and receiver but cannot read the data that was sent. This means that content can only be blocked on the basis of sender or receiver. Hence, an ISP wishing to block a porn site hosted on a commercial web server that hosts both a news site and a porn site would have to block both - meaning the news site would be inaccessible. This is not very fair on the news site which becomes a victim of censorship in this case. It is worth noting that this is a considerable simplification and does not refer to all of the technical issues surrounding filtering but is a useful model for demonstrating a principle.</summary></entry><entry><title type="html">Developers, productivity and how it affects the balance sheet</title><link href="/technology/2012/04/04/developers-productivity-and-how-it-affects-the-balance-sheet.html" rel="alternate" type="text/html" title="Developers, productivity and how it affects the balance sheet" /><published>2012-04-04T22:07:44+01:00</published><updated>2012-04-04T22:07:44+01:00</updated><id>/technology/2012/04/04/developers-productivity-and-how-it-affects-the-balance-sheet</id><content type="html" xml:base="/technology/2012/04/04/developers-productivity-and-how-it-affects-the-balance-sheet.html">&lt;p&gt;When managing development teams on medium or large IT development projects (effort in excess of 18 developer months), the majority of the cost of the project is used up in developer time rather than capital expenditure. Therefore, at times when budgets are stretched, it is especially important to understand the issues surrounding developer productivity.&lt;/p&gt;
&lt;p&gt;There isn't a line on your balance sheet for your developers' productivity (except perhaps the bottom line - but only if it's really bad). Without understanding the detail of what your developers have to do during their day, it is hard to manage and optimise it.&lt;/p&gt;
&lt;p&gt;Here are three things that will help you get the most out of your developers.&lt;/p&gt;
&lt;h3&gt;Minimise interruptions&lt;/h3&gt;
&lt;p&gt;The number one cause of developer productivity loss is interruptions. I cannot stress this enough.&lt;/p&gt;
&lt;p&gt;When solving complex problems involving a number of components or a wide range of scenarios, it takes time for the developer to build a personal model of what is to be done or what is going wrong. To refresh one's memory of previously written code, to determine possible problems and formulate a plan to solve them - all of these things require complete concentration. Interrupting during this process requires a &lt;em&gt;context switch&lt;/em&gt; meaning that all of this information has to be &lt;em&gt;parked&lt;/em&gt; while another issue is tackled. A single interruption like this can set someone back by half an hour or more. If this happens frequently enough, it really eats into time and hence the budget.&lt;/p&gt;
&lt;p&gt;A few techniques to reduce interruptions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Schedule meetings at the beginning or end of the day - not in the middle of the morning or afternoon.&lt;/li&gt;
&lt;li&gt;If developers are required to answer client calls or provide support, interruptions can be minimised by having a strict support rota - where one developer is dedicated to support and does not need to produce other deliverables during this period.&lt;/li&gt;
&lt;li&gt;If this isn't practical, another possibility is to restrict calls to a particular time of day - so as to free up the remainder for uninterrupted work.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using any method that is appropriate in your workplace, it is really important to ensure that developers have at least a couple of hours per day without any forced interruptions.&lt;/p&gt;
&lt;h3&gt;Pair programming&lt;/h3&gt;
&lt;p&gt;Pair programming is where two developers sit together at the same workstation and work as a team on solving a particular problem or producing some new functionality.&lt;/p&gt;
&lt;p&gt;Pair programming on the face of it can sound like a fairly cushy thing as it requires double the developer resource but it can reduce development and testing time considerably. Having two heads looking at a screen rather than one means that those silly mistakes that everyone makes but often misses individually will get picked up very quickly. Finding such bugs early reduces the cost to fix and it means that other developers don't have to help out later (which would take longer as they'd have to context switch, then understand the code and the issue in order to be able to help fix it). Once developers get over the initial irritation at having someone reviewing their code in real-time over their shoulder, this helps greatly. &lt;/p&gt;
&lt;h3&gt;Deal with bureaucracy - so developers don't have to&lt;/h3&gt;
&lt;p&gt;First of all, minimising unnecessary bureaucracy is an excellent first step that will skyrocket everyone's productivity and should be undertaken as a matter of course.&lt;/p&gt;
&lt;p&gt;It is essential that developers provide work estimates for tasks and keep the actual time spent on tasks up to date. However, developers should only do the things that it is not possible for the project manager to do. Other tasks involved with project planning, such as using this information to keep a project plan up to date and managing budgets should be done by the project manager. Delegation is something that PMs have to be able to do effectively in order to succeed. However, having the ability to delegate tasks selectively and appropriately is an excellent skill and one which will improve productivity all round.&lt;/p&gt;</content><author><name>{&quot;display_name&quot;=&gt;&quot;jacksonps4&quot;, &quot;login&quot;=&gt;&quot;jacksonps4&quot;, &quot;email&quot;=&gt;&quot;chris@indigenously.co.uk&quot;, &quot;url&quot;=&gt;&quot;&quot;}</name><email>chris@indigenously.co.uk</email></author><summary type="html">There isn't a line on your balance sheet for your developers' productivity (except perhaps the bottom line - but only if it's really bad). Without understanding the detail of what your developers have to do during their day, it is hard to manage and optimise it.</summary></entry><entry><title type="html">How to handle the transition from a small to large company</title><link href="/uncategorized/2012/04/02/making-the-transition-from-startups-or-smes-to-large-firms-how-to-handle-it.html" rel="alternate" type="text/html" title="How to handle the transition from a small to large company" /><published>2012-04-02T14:05:44+01:00</published><updated>2012-04-02T14:05:44+01:00</updated><id>/uncategorized/2012/04/02/making-the-transition-from-startups-or-smes-to-large-firms-how-to-handle-it</id><content type="html" xml:base="/uncategorized/2012/04/02/making-the-transition-from-startups-or-smes-to-large-firms-how-to-handle-it.html">&lt;p&gt;As someone who has made the transition between small (&lt;30 employees) and large firms (&gt;20,000 employees), I can say with certainty that the move can be a bit of a culture shock. There are many pros and cons to working in each and it is impossible to say than one is better than the other in all cases. &lt;/p&gt;
&lt;p&gt;Working in a large company is not always better than working in a small one. Being in a startup can be risky or rewarding - being employed at a large company can make you feel insignificant or very influential. However, it all depends on your particular situation. If you are considering moving from a small company to a large one or even if you have just moved in the opposite direction, here are some tips that will ease the transition for you.&lt;/p&gt;
&lt;h3&gt;Responsibilities&lt;/h3&gt;
&lt;p&gt;By their very nature, small companies tend to be quite dynamic and often need generalists who can turn their hand to anything if called upon to do so. Larger companies can afford to have specialists in niche areas who may not have a broad range of skills but will be very good at the job for which they were hired. If you're used to working at a small company, you have probably been in a situation where your boss has asked you to do something and you don't know where to start. Shortly afterwards, you realise that despite this, you are the only person in the company with the skills to attempt it. This brings home a real sense of responsibility as it becomes clear that &lt;strong&gt;you have to succeed&lt;/strong&gt;. In larger companies, it can be easy to pass tasks that you don't immediately know how to do on to an &quot;expert&quot;. Sometimes it appropriate to do so but it is always worth ensuring that you are doing this for the right reasons.&lt;/p&gt;
&lt;h3&gt;Meetings, conference calls and town halls&lt;/h3&gt;
&lt;p&gt;Often in a small company or with a small team, everyone sits in the same vicinity and talks to the rest of the team every day. This reduces the need for formal meetings or conference calls to situations where external clients are involved. In larger companies often with teams distributed about a large building, perhaps even in different cities or on different continents, these regular update meetings and conference calls are a necessary means of keeping everyone aware of what is happening. They also help to focus teams on the most important tasks. The dubiously named &lt;em&gt;town hall&lt;/em&gt; meetings usually involve an entire department or division and happen quarterly or thereabouts. Although initially it may feel like these meetings take up a lot of time for very little benefit, they will help you in the long-term as they will keep you aware of the bigger picture of corporate objectives as well as providing an insight into the activities of other teams, which can often help your team to be more effective.&lt;/p&gt;
&lt;h3&gt;Processes&lt;/h3&gt;
&lt;p&gt;At an SME, the process for a team leader getting some new servers might involve sending an email to or having a meeting with the IT director. He or she will approve (or deny) the request and then pass it to the financial director for final approval before going ahead and ordering the kit. The servers then arrive and are passed to the team leader to set up. This can take a day or two for approval and then a couple of weeks before the ordered kit actually arrives, then a further day or two to set it up.&lt;/p&gt;
&lt;p&gt;At a large company, this is more likely to be tied in with a team budget, which requires sign-off by the department head followed by a longer procurement process to get the servers ordered and delivered at agreed corporate rates from approved suppliers. This can take weeks for approval and months for delivery. Then another few weeks while the infrastructure team get the kit installed in the data centre and another week or two for another infrastructure team to install the operating system and software before handing it off to the application team for use.&lt;/p&gt;
&lt;p&gt;Some companies are more efficient than others at this process but in general, procurement is something that will take longer at a larger firm. Generally, the lead-time is increased but with the benefit that costs can be centrally managed and controlled.&lt;/p&gt;
&lt;p&gt;Other processes like software installation can sometimes be much faster at large companies if they have a good IT service management process in place (see &lt;a href=&quot;/wordpress/?p=932&quot;&gt;previous article about this here&lt;/a&gt;). Instead of having to get approval, order the software, download or await delivery and install it, you can often request the software via the help desk, get approval from your manager and the infrastructure team can have it installed within minutes because the large company has a site license for the software and the means to push it out to your computer quickly.&lt;/p&gt;
&lt;h3&gt;Pay and conditions&lt;/h3&gt;
&lt;p&gt;In smaller companies where revenue streams are not as large or constant as in larger companies, wages are likely to be smaller. For some very small outfits, it is not unheard of for payment to employees to be delayed by a month if revenues have been particularly bad. This does not usually happen at larger well-established firms, who can often also provide benefits like private medical insurance, discounts with some retailers and they usually contribute a percentage of your salary to a pension scheme. However, if you're a star performer at a small firm, you can sometimes gain a reasonable amount of equity. This can be very rewarding in the long-term if the value of the company grows considerably in value. Becoming a significant shareholder in a larger company is usually something you'd have to become fairly senior to achieve.&lt;/p&gt;</content><author><name>{&quot;display_name&quot;=&gt;&quot;jacksonps4&quot;, &quot;login&quot;=&gt;&quot;jacksonps4&quot;, &quot;email&quot;=&gt;&quot;chris@indigenously.co.uk&quot;, &quot;url&quot;=&gt;&quot;&quot;}</name><email>chris@indigenously.co.uk</email></author><summary type="html">As someone who has made the transition between small (20,000 employees), I can say with certainty that the move can be a bit of a culture shock. There are many pros and cons to working in each and it is impossible to say than one is better than the other in all cases. Working in a large company is not always better than working in a small one. Being in a startup can be risky or rewarding - being employed at a large company can make you feel insignificant or very influential. However, it all depends on your particular situation. If you are considering moving from a small company to a large one or even if you have just moved in the opposite direction, here are some tips that will ease the transition for you. Responsibilities By their very nature, small companies tend to be quite dynamic and often need generalists who can turn their hand to anything if called upon to do so. Larger companies can afford to have specialists in niche areas who may not have a broad range of skills but will be very good at the job for which they were hired. If you're used to working at a small company, you have probably been in a situation where your boss has asked you to do something and you don't know where to start. Shortly afterwards, you realise that despite this, you are the only person in the company with the skills to attempt it. This brings home a real sense of responsibility as it becomes clear that you have to succeed. In larger companies, it can be easy to pass tasks that you don't immediately know how to do on to an &quot;expert&quot;. Sometimes it appropriate to do so but it is always worth ensuring that you are doing this for the right reasons. Meetings, conference calls and town halls Often in a small company or with a small team, everyone sits in the same vicinity and talks to the rest of the team every day. This reduces the need for formal meetings or conference calls to situations where external clients are involved. In larger companies often with teams distributed about a large building, perhaps even in different cities or on different continents, these regular update meetings and conference calls are a necessary means of keeping everyone aware of what is happening. They also help to focus teams on the most important tasks. The dubiously named town hall meetings usually involve an entire department or division and happen quarterly or thereabouts. Although initially it may feel like these meetings take up a lot of time for very little benefit, they will help you in the long-term as they will keep you aware of the bigger picture of corporate objectives as well as providing an insight into the activities of other teams, which can often help your team to be more effective. Processes At an SME, the process for a team leader getting some new servers might involve sending an email to or having a meeting with the IT director. He or she will approve (or deny) the request and then pass it to the financial director for final approval before going ahead and ordering the kit. The servers then arrive and are passed to the team leader to set up. This can take a day or two for approval and then a couple of weeks before the ordered kit actually arrives, then a further day or two to set it up. At a large company, this is more likely to be tied in with a team budget, which requires sign-off by the department head followed by a longer procurement process to get the servers ordered and delivered at agreed corporate rates from approved suppliers. This can take weeks for approval and months for delivery. Then another few weeks while the infrastructure team get the kit installed in the data centre and another week or two for another infrastructure team to install the operating system and software before handing it off to the application team for use. Some companies are more efficient than others at this process but in general, procurement is something that will take longer at a larger firm. Generally, the lead-time is increased but with the benefit that costs can be centrally managed and controlled. Other processes like software installation can sometimes be much faster at large companies if they have a good IT service management process in place (see previous article about this here). Instead of having to get approval, order the software, download or await delivery and install it, you can often request the software via the help desk, get approval from your manager and the infrastructure team can have it installed within minutes because the large company has a site license for the software and the means to push it out to your computer quickly. Pay and conditions In smaller companies where revenue streams are not as large or constant as in larger companies, wages are likely to be smaller. For some very small outfits, it is not unheard of for payment to employees to be delayed by a month if revenues have been particularly bad. This does not usually happen at larger well-established firms, who can often also provide benefits like private medical insurance, discounts with some retailers and they usually contribute a percentage of your salary to a pension scheme. However, if you're a star performer at a small firm, you can sometimes gain a reasonable amount of equity. This can be very rewarding in the long-term if the value of the company grows considerably in value. Becoming a significant shareholder in a larger company is usually something you'd have to become fairly senior to achieve.</summary></entry><entry><title type="html">UK government plans to monitor Internet and email are doomed to fail</title><link href="/technology/2012/04/01/uk-government-plans-to-monitor-internet-communications.html" rel="alternate" type="text/html" title="UK government plans to monitor Internet and email are doomed to fail" /><published>2012-04-01T13:13:50+01:00</published><updated>2012-04-01T13:13:50+01:00</updated><id>/technology/2012/04/01/uk-government-plans-to-monitor-internet-communications</id><content type="html" xml:base="/technology/2012/04/01/uk-government-plans-to-monitor-internet-communications.html">&lt;p&gt;&lt;a href=&quot;http://www.bbc.co.uk/news/uk-politics-17576745&quot;&gt;BBC News&lt;/a&gt; and &lt;a href=&quot;http://www.google.com/hostednews/ukpress/article/ALeqM5hd9UvMaapM3t9fbUCbxmVV3UbP-w?docId=N0046311333234828463A&quot;&gt;Press Association&lt;/a&gt; are both reporting that the UK government is planning email and web monitoring legislation so that they can compel Internet service providers to provide them with access to real-time Internet communications provided that a warrant has been obtained for doing so.&lt;/p&gt;
&lt;p&gt;This is a really bad idea. Not only is it a blow to individual freedom, it isn't even technically possible to do it effectively. This makes it a waste of time and money as well as an invasion of privacy.&lt;/p&gt;
&lt;p&gt;Because of the design of the Internet, introducing this legislation would be a bit like introducing new border controls for anyone arriving into the UK by air but not bothering to check anyone who arrives by sea or train.&lt;/p&gt;
&lt;p&gt;Let me explain: if the law were to be passed and the government could ask an ISP to provide access to all Internet communications for a particular user, this only paints a partial picture of their web and email activity. &lt;/p&gt;
&lt;p&gt;Web access is often secured with encryption - meaning that the ISP could provide the IP addresses to which data is being sent but no details of what is being sent. So for example, it would be possible to determine that I accessed Facebook at a particular time but it wouldn't be possible to find out to whom I sent messages, whose wall I wrote on or what any of the messages said. &lt;/p&gt;
&lt;p&gt;It would be a bit like forcing Royal Mail to turn over the contents of PO boxes on the government's request. This would work if all mail resided in PO boxes but since most mail is sent to a recipient's address rather than a PO box, it would be ineffective.&lt;/p&gt;
&lt;p&gt;The same is true in the case of email.&lt;/p&gt;
&lt;p&gt;As most web-based email services encrypt the traffic between your web browser and their servers, less than 50% of all emails would be accessible via any new legislation. The only data to which the government would get access would be the email of those users whose email is actually hosted by their Internet service provider (e.g. those people who have addresses like joe.bloggs@aol.com / bob.jones@btinternet.com etc). According to &lt;a href=&quot;http://www.campaignmonitor.com/stats/email-clients/&quot;&gt;this survey of email clients by Campaign Monitor&lt;/a&gt;, almost 50% of the email they deliver is accessed by web-based email clients. Assuming this is a fair sample, a minimum of half of Internet users' email is hosted &quot;in the cloud&quot; (people can still use other clients such as Microsoft Outlook to access their web-based email securely so it is likely that more than 50% of people actually use cloud-based email).&lt;/p&gt;
&lt;p&gt;Going back to the traditional mail analogy, people wanting to send covert messages would encipher their letters so that even if they were to be intercepted, the messages would appear innocuous or meaningless to the evesdropper. Letters could also be relayed via multiple recipients so that the true sender and receiver cannot easily to known to anyone who intercepts the letter. &lt;/p&gt;
&lt;p&gt;There are several techniques that can be used to the same effect with Internet traffic. Tunnelling with SSH or VPN protocols means that it is often not possible to be certain of the final destination of web traffic as it may be routed through several different servers along the way. If web traffic is sent outside of the UK and tunnelled through a server to another destination, it would be very difficult to trace where it is going - let alone find out what the content of the traffic is.&lt;/p&gt;
&lt;p&gt;This legislation will no doubt be resisted by the ISPs in the same way that they resisted calls for them to block users who appear to be hosting pirated music. It would be expensive for the ISPs to implement this measure and I suspect they will argue that it isn't their place to regulate user activities.&lt;/p&gt;
&lt;p&gt;I personally think that laws monitoring individual Internet activity need to be resisted on the basis of individual freedom and privacy alone. The fact that such monitoring is not likely to be effective is yet another reason why it should not go ahead.&lt;/p&gt;</content><author><name>{&quot;display_name&quot;=&gt;&quot;jacksonps4&quot;, &quot;login&quot;=&gt;&quot;jacksonps4&quot;, &quot;email&quot;=&gt;&quot;chris@indigenously.co.uk&quot;, &quot;url&quot;=&gt;&quot;&quot;}</name><email>chris@indigenously.co.uk</email></author><summary type="html">Because of the design of the Internet, introducing this legislation would be a bit like introducing new border controls for anyone arriving into the UK by air but not bothering to check anyone who arrives by sea or train.</summary></entry></feed>